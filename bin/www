#!/usr/bin/env node

/**
 * Module dependencies.
 */

var app = require('../app')
var debug = require('debug')('containertests:server')
var http = require('http')
var { variables } = require('../routes/index')
// var { variables } = require('../routes/index')

/**
 * Get port from environment and store in Express.
 */

var port = normalizePort(process.env.PORT || '3000')
app.set('port', port)

/**
 * Create HTTP server.
 */

var server = http.createServer(app)

/**
 * Listen on provided port, on all network interfaces.
 */

server.listen(port)
server.on('error', onError)
server.on('listening', onListening)

/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {
  var port = parseInt(val, 10)

  if (isNaN(port)) {
    // named pipe
    return val
  }

  if (port >= 0) {
    // port number
    return port
  }

  return false
}

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
  if (error.syscall !== 'listen') {
    throw error
  }

  var bind = typeof port === 'string'
    ? 'Pipe ' + port
    : 'Port ' + port

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case 'EACCES':
      console.error(bind + ' requires elevated privileges')
      process.exit(1)
      break
    case 'EADDRINUSE':
      console.error(bind + ' is already in use')
      process.exit(1)
      break
    default:
      throw error
  }
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening() {
  var addr = server.address()
  var bind = typeof addr === 'string'
    ? 'pipe ' + addr
    : 'port ' + addr.port
  console.log('Neighbour port is ', process.env.NEIGHBOUR)
  console.log('initial value of variables ', variables)
  console.log('Starting on port ', process.env.PORT)
  var options = {
    host: process.env.NEIGHBOUR_HOST, //'0.0.0.0',
    port: process.env.NEIGHBOUR,
    path: '/add',
    method: 'put'
  }


  setInterval(() => {
    var req = http.request(options, function (res) {
      res.setEncoding('utf8')
      res.on('data', function (chunk) {
        console.log('Successfully sent: ' + chunk)
        variables.outbound++
      })
    })

    req.on('error', function (e) {
      console.log('problem with request: ' + e.message)
    })
    req.end()
  }, 60000)
  debug('Listening on ' + bind)
}
